(self.webpackChunkbookshop=self.webpackChunkbookshop||[]).push([[753],{753:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>o});const o=(n,e,{how_much:t}=function(n,e){let t=[];var o=0;for(let r=0;r<e.length;r++)n.map((n=>{n[Object.keys(n)].map((n=>{n.uniqueID==e[r]&&(0==n.sales?o+=Number(n.price):o+=Number(n.price.split("/")[1]),t.push(n))}))}));return{how_much:o}}(n,e))=>`\n  <thead >\n    <tr>\n      <th scope="col" >Information</th>\n      <th scope="col" >Input Field</th>\n    </tr>\n  </thead>\n    <tr>\n        <th scope="row"> First Name</th> \n        <th scope="row">\n                <div class="form-group">\n  <input type="text" class="form-control" placeholder="Required" id="inputFName">\n      <div class="invalid-feedback">Sorry, name is too short. Check?</div>\n  <div class="valid-feedback">Success! You've done it.</div>\n</div>\n</th>\n\n    </tr>\n    <tr>\n        <th scope="row">Last Name</th> \n        <th scope="row">\n                <div class="form-group">\n  <input type="text" class="form-control" placeholder="Optional" id="inputLName">\n</div>\n</th>\n\n    </tr>\n    <tr>\n        <th scope="row">Email</th> \n        <th scope="row">\n                <div class="form-group">\n  <input type="text" class="form-control" placeholder="Required" id="inputEmail">\n    <div class="invalid-feedback">Sorry, email is invalid. Try another?</div>\n  <div class="valid-feedback">Success! You've done it.</div>\n</div>\n</th>\n\n    </tr>          \n    <tr>\n        <th scope="row"> Phone</th> \n        <th scope="row">\n        <div class="form-group">\n  <input type="text" class="form-control" placeholder="Required" id="inputPhone">\n  <div class="invalid-feedback">Sorry, phone is invalid. Try another?</div>\n  <div class="valid-feedback">Success! You've done it.</div>\n</div>\n        </th>\n\n    </tr>      \n\n      <tr>\n        <th scope="row">Price</th> \n        <th scope="row">${t}UAH</th>\n    </tr>\n  \n  \n  \n\n`}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ib29rc2hvcC8uL0pTL3ZpZXcvb3JkZXIuanMiXSwibmFtZXMiOlsiZGF0YSIsImJvb2tzX2luX2NhcnQiLCJob3dfbXVjaCIsImRhdGFPYmplY3QiLCJjYXJ0X2FyciIsImkiLCJsZW5ndGgiLCJtYXAiLCJjYXRhbG9nIiwiT2JqZWN0Iiwia2V5cyIsImJvb2siLCJ1bmlxdWVJRCIsInNhbGVzIiwiTnVtYmVyIiwicHJpY2UiLCJzcGxpdCIsInB1c2giLCJDYXJ0QXJyYXkiXSwibWFwcGluZ3MiOiJnSUE2QkEsTUEyREEsRUEzRGEsQ0FBQ0EsRUFBTUMsR0FBaUJDLFlBN0JyQyxTQUFtQkMsRUFBWUYsR0FFM0IsSUFBSUcsRUFBUyxHQUNiLElBQUlGLEVBQVMsRUFDYixJQUFJLElBQUlHLEVBQUcsRUFBR0EsRUFBRUosRUFBY0ssT0FBT0QsSUFFakNGLEVBQVdJLEtBQUtDLElBQ1pBLEVBQVFDLE9BQU9DLEtBQUtGLElBQVVELEtBQUtJLElBRTNCQSxFQUFLQyxVQUFVWCxFQUFjSSxLQUVkLEdBQVpNLEVBQUtFLE1BRUpYLEdBQW1CWSxPQUFPSCxFQUFLSSxPQUkvQmIsR0FBa0JZLE9BQU9ILEVBQUtJLE1BQU1DLE1BQU0sS0FBSyxJQUVuRFosRUFBU2EsS0FBS04sVUFPOUIsTUFBTyxDQUFFVCxZQUdrQ2dCLENBQVVsQixFQUFNQyxLQUFtQixvaERBb0R4REMiLCJmaWxlIjoiNzUzLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIENhcnRBcnJheShkYXRhT2JqZWN0LCBib29rc19pbl9jYXJ0KVxue1xuICAgIGxldCBjYXJ0X2Fycj1bXTtcbiAgICB2YXIgaG93X211Y2g9MDtcbiAgICBmb3IobGV0IGkgPTA7IGk8Ym9va3NfaW5fY2FydC5sZW5ndGg7aSsrKVxuICAgIHtcbiAgICAgICAgZGF0YU9iamVjdC5tYXAoKGNhdGFsb2cpPT57XG4gICAgICAgICAgICBjYXRhbG9nW09iamVjdC5rZXlzKGNhdGFsb2cpXS5tYXAoKGJvb2spPT57XG5cbiAgICAgICAgICAgICAgICBpZiAoYm9vay51bmlxdWVJRD09Ym9va3NfaW5fY2FydFtpXSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlmKGJvb2suc2FsZXM9PTApXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvd19tdWNoPSBob3dfbXVjaCtOdW1iZXIoYm9vay5wcmljZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3dfbXVjaD1ob3dfbXVjaCtOdW1iZXIoYm9vay5wcmljZS5zcGxpdCgnLycpWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXJ0X2Fyci5wdXNoKGJvb2spO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7IGhvd19tdWNofTtcbn1cblxuY29uc3QgdmlldyA9IChkYXRhLCBib29rc19pbl9jYXJ0LCB7IGhvd19tdWNofT1DYXJ0QXJyYXkoZGF0YSwgYm9va3NfaW5fY2FydCkpID0+IGBcbiAgPHRoZWFkID5cbiAgICA8dHI+XG4gICAgICA8dGggc2NvcGU9XCJjb2xcIiA+SW5mb3JtYXRpb248L3RoPlxuICAgICAgPHRoIHNjb3BlPVwiY29sXCIgPklucHV0IEZpZWxkPC90aD5cbiAgICA8L3RyPlxuICA8L3RoZWFkPlxuICAgIDx0cj5cbiAgICAgICAgPHRoIHNjb3BlPVwicm93XCI+IEZpcnN0IE5hbWU8L3RoPiBcbiAgICAgICAgPHRoIHNjb3BlPVwicm93XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBwbGFjZWhvbGRlcj1cIlJlcXVpcmVkXCIgaWQ9XCJpbnB1dEZOYW1lXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiaW52YWxpZC1mZWVkYmFja1wiPlNvcnJ5LCBuYW1lIGlzIHRvbyBzaG9ydC4gQ2hlY2s/PC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJ2YWxpZC1mZWVkYmFja1wiPlN1Y2Nlc3MhIFlvdSd2ZSBkb25lIGl0LjwvZGl2PlxuPC9kaXY+XG48L3RoPlxuXG4gICAgPC90cj5cbiAgICA8dHI+XG4gICAgICAgIDx0aCBzY29wZT1cInJvd1wiPkxhc3QgTmFtZTwvdGg+IFxuICAgICAgICA8dGggc2NvcGU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHBsYWNlaG9sZGVyPVwiT3B0aW9uYWxcIiBpZD1cImlucHV0TE5hbWVcIj5cbjwvZGl2PlxuPC90aD5cblxuICAgIDwvdHI+XG4gICAgPHRyPlxuICAgICAgICA8dGggc2NvcGU9XCJyb3dcIj5FbWFpbDwvdGg+IFxuICAgICAgICA8dGggc2NvcGU9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHBsYWNlaG9sZGVyPVwiUmVxdWlyZWRcIiBpZD1cImlucHV0RW1haWxcIj5cbiAgICA8ZGl2IGNsYXNzPVwiaW52YWxpZC1mZWVkYmFja1wiPlNvcnJ5LCBlbWFpbCBpcyBpbnZhbGlkLiBUcnkgYW5vdGhlcj88L2Rpdj5cbiAgPGRpdiBjbGFzcz1cInZhbGlkLWZlZWRiYWNrXCI+U3VjY2VzcyEgWW91J3ZlIGRvbmUgaXQuPC9kaXY+XG48L2Rpdj5cbjwvdGg+XG5cbiAgICA8L3RyPiAgICAgICAgICBcbiAgICA8dHI+XG4gICAgICAgIDx0aCBzY29wZT1cInJvd1wiPiBQaG9uZTwvdGg+IFxuICAgICAgICA8dGggc2NvcGU9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBwbGFjZWhvbGRlcj1cIlJlcXVpcmVkXCIgaWQ9XCJpbnB1dFBob25lXCI+XG4gIDxkaXYgY2xhc3M9XCJpbnZhbGlkLWZlZWRiYWNrXCI+U29ycnksIHBob25lIGlzIGludmFsaWQuIFRyeSBhbm90aGVyPzwvZGl2PlxuICA8ZGl2IGNsYXNzPVwidmFsaWQtZmVlZGJhY2tcIj5TdWNjZXNzISBZb3UndmUgZG9uZSBpdC48L2Rpdj5cbjwvZGl2PlxuICAgICAgICA8L3RoPlxuXG4gICAgPC90cj4gICAgICBcblxuICAgICAgPHRyPlxuICAgICAgICA8dGggc2NvcGU9XCJyb3dcIj5QcmljZTwvdGg+IFxuICAgICAgICA8dGggc2NvcGU9XCJyb3dcIj4ke2hvd19tdWNofVVBSDwvdGg+XG4gICAgPC90cj5cbiAgXG4gIFxuICBcblxuYDtcbmV4cG9ydCBkZWZhdWx0IHZpZXc7Il0sInNvdXJjZVJvb3QiOiIifQ==